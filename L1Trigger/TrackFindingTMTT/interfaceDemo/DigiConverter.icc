#include "L1Trigger/TrackFindingTMTT/interfaceDemo/DigiConverter.h"



namespace demo {

//-----------------------------------------------------------------------------
DigiConverter::DigiConverter( const TMTT::Settings* settings ) :
mSettings(settings) {

}
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
DigiDTCStub
DigiConverter::makeDigiDTCStub(const TMTT::Stub& aDTCStub, uint32_t aDigiPhiSec) const {
    return DigiDTCStub(
               aDTCStub.digitalStub().iDigi_PhiO(),
               aDTCStub.digitalStub().moduleType(),
               aDigiPhiSec,
               aDTCStub.digitalStub().iDigi_Z(),
               aDTCStub.digitalStub().iDigi_Bend(),
               aDTCStub.digitalStub().iDigi_Rt(),
               true
           );
}
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
DigiHTStub
DigiConverter::makeDigiHTStub( const TMTT::Stub& aHTStub, uint32_t aPhiSectorIdInNon, uint32_t aEtaSectorId, int cBin, int aChiZ, int aChiPhi, bool mSel ) const {
    return DigiHTStub(
               aHTStub.layerIdReduced(),
               aPhiSectorIdInNon,
               aEtaSectorId,
               cBin,
               aChiZ,
               aChiPhi,
               aHTStub.digitalStub().iDigi_Rt(),
               mSel,
               true // valid
           );
}
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
DigiHTMiniStub
DigiConverter::makeDigiHTMiniStub( const TMTT::Stub& aHTMiniStub, const TMTT::L1track2D& a2DTrk, bool isFirstStubOnTrackCandidate, uint32_t aSectorId, int8_t cBin, int8_t mBin) const {
    return DigiHTMiniStub(
               aHTMiniStub.digitalStub().iDigi_Hybrid_Layer(), // aHTMiniStub.layerIdReduced(),
               aSectorId,
               cBin,
               mBin,
               aHTMiniStub.digitalStub().iDigi_Hybrid_Phi(), //iDigi_PhiS(),
               aHTMiniStub.digitalStub().iDigi_Hybrid_Z(),
               aHTMiniStub.digitalStub().iDigi_Hybrid_R(),
               aHTMiniStub.digitalStub().iDigi_Rt(),
               true, // valid
               aHTMiniStub.digitalStub().iDigi_Hybrid_Alpha(), // Alpha
               aHTMiniStub.digitalStub().iDigi_Hybrid_Bend(), // Bend
               aHTMiniStub.barrel(),
               aHTMiniStub.psModule(),
               isFirstStubOnTrackCandidate,
               a2DTrk.getNumStubs(),
               a2DTrk.digitaltrack().iDigi_oneOver2r(),
               a2DTrk.digitaltrack().iDigi_phi0rel(),
               a2DTrk.digitaltrack().iDigi_tanLambda(),
               a2DTrk.digitaltrack().iDigi_z0()
           );
}
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
DigiKF4Track
DigiConverter::makeDigiKF4Track( const TMTT::L1fittedTrack& aFitTrk ) const {

    const uint numPhiSecPerNon = mSettings->numPhiSectors() / mSettings->numPhiNonants();

    if (aFitTrk.getHitPattern() > 127) cout<<"HIT "<<aFitTrk.getHitPattern()<<endl;

    return DigiKF4Track(
               aFitTrk.digitaltrack().iDigi_oneOver2r(),
               aFitTrk.digitaltrack().iDigi_phi0rel(),
               aFitTrk.digitaltrack().iDigi_tanLambda(),
               aFitTrk.digitaltrack().iDigi_z0(),
               aFitTrk.digitaltrack().iDigi_d0(),
               aFitTrk.digitaltrack().iDigi_chisquared(),
               0, // aFitTrk.digitaltrack().iDigi_bendchisquaredbin(),
               aFitTrk.digitaltrack().hitPattern(),
               0, // aFitTrk.digitaltrack().iDigi_mvaquality(),
               0, // aFitTrk.digitaltrack().iDigi_mvaqualityExtra1(),
               0, // aFitTrk.digitaltrack().iDigi_mvaqualityExtra2(),
               0, // aFitTrk.digitaltrack().iDigi_reserved(),
               0, // eventID
               true
           );
}
//-----------------------------------------------------------------------------

} // namespace demo

